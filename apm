#!/usr/bin/python3
import subprocess
import sys
if subprocess.getoutput("locale") == 'LANG=cs_CZ.UTF-8\nLC_CTYPE="cs_CZ.UTF-8"\nLC_NUMERIC="cs_CZ.UTF-8"\nLC_TIME="cs_CZ.UTF-8"\nLC_COLLATE="cs_CZ.UTF-8"\nLC_MONETARY="cs_CZ.UTF-8"\nLC_MESSAGES="cs_CZ.UTF-8"\nLC_PAPER="cs_CZ.UTF-8"\nLC_NAME="cs_CZ.UTF-8"\nLC_ADDRESS="cs_CZ.UTF-8"\nLC_TELEPHONE="cs_CZ.UTF-8"\nLC_MEASUREMENT="cs_CZ.UTF-8"\nLC_IDENTIFICATION="cs_CZ.UTF-8"\nLC_ALL=':
    sys.path.append('/app')
    from translations.cs import *
else:
    sys.path.append('/app')
    from translations.en import *

import json
import os
import argparse
from urllib.request import urlopen
from tabulate import tabulate

apmcli = argparse.ArgumentParser()
apmcli.add_argument("-install", help=help_install_appimages, type=str)
apmcli.add_argument("-remove", help=help_uninstall_appimages, type=str)
apmcli.add_argument("-seeall", help=help_see_all_appimages, action="store_true")
apmcli.add_argument("-search", help=help_search_appimages, type=str)
apmcli.add_argument("-update", help=help_update_appimage, type=str)

u = urlopen("https://raw.githubusercontent.com/vikdevelop/apm/main/appimages.json")
jsonObject = json.load(u)

args = apmcli.parse_args()
HOME = os.path.expanduser('~')

if args.install in jsonObject:
    if os.path.exists("%s/.AppImage/" % HOME + args.install + ".AppImage"):
        print(package + args.install + appimage_installed_status)
    else:
        print('\033[1m' + installation_appimage_title + '\033[0m')
        installdata = [
        ['\033[92m' + args.install + '\033[0m', "@latest", "x86_64", jsonObject[args.install]],
        ]

        head = [name_tab, version_tab, arch_tab, source_tab]

        print(tabulate(installdata, headers=head))
        dialog = input(continue_input + " [Y/n]: ")
        if dialog == 'n':
            print(canceled)
            exit()
        if dialog == 'y' or 'Y':
            print(downloading_status + args.install)
            os.chdir("%s/.var/app/com.github.vikdevelop.apm/cache/tmp" % HOME)
            os.system("wget -c %s > /dev/null 2>&1" % jsonObject[args.install])
            if not os.path.exists("%s/.AppImage" % HOME):
                os.mkdir("%s/.AppImage" % HOME)
            print(installing_text + args.install)
            os.system("mv *.AppImage $HOME/.AppImage/" + args.install + ".AppImage")
            os.system("chmod +x $HOME/.AppImage/" + args.install + ".AppImage")
            if not os.path.exists('%s/.local/share/applications/' % HOME):
                os.makedirs('%s/.local/share/applications/' % HOME)
            if not os.path.exists('%s/.local/share/icons/hicolor/128x128/apps/AppImage.svg' % HOME):
                os.makedirs('%s/.local/share/icons/hicolor/128x128/apps' % HOME)
                os.system('wget -qO %s/.local/share/icons/hicolor/128x128/apps/AppImage.svg https://raw.githubusercontent.com/vikdevelop/apm/393b99753ccafaa750c201171a310cafdb1c2b7c/appicon/AppImage.svg' % HOME)
            with open('%s/.local/share/applications/' % HOME + args.install + '.desktop', 'w') as desktop:
                desktop.write("[Desktop Entry]\n")
                desktop.write("Type=Application\n")
                desktop.write("Name=" + args.install + "\n")
                desktop.write("Comment=AppImage of " + args.install + "\n")
                desktop.write("Icon=AppImage\n")
                desktop.write("Exec=%s/.AppImage/" % HOME + args.install + ".AppImage\n")
                desktop.write("Terminal=false\n")
                desktop.write("Categories=System;System-Tools;")
            print('\033[92m' + done_text + '\033[0m')

if args.remove:
    if not os.path.exists("%s/.AppImage/" % HOME + args.remove + ".AppImage"):
        print(package + args.remove + package_is_not_installed + args.remove + type_apm_help)
        exit()
    else:
        print(chacking_installation_status + args.remove + " ...")
    size = os.path.getsize("%s/.AppImage/" % HOME + args.remove + ".AppImage") >> 20
    print('\033[1m' + uninstallation_appimage + '\033[0m')
    rmdata = [
    ['\033[91m' + args.remove + '\033[0m', "%s MB" % size, "x86_64", "@appimages.json", "$HOME/.AppImage/" + args.remove + ".AppImage"],
    ]

    # create header
    head = [name_tab, size_tab, arch_tab, repo_tab, path_tab]

    # display table
    print(tabulate(rmdata, headers=head))
    rm = input(continue_input + " [Y/n]: ")
    if rm == 'n':
        print(canceled)
        exit()
    if rm == 'Y' or 'y':
        print(removing_text + " " + args.remove)
        os.remove(os.path.expanduser('~/.AppImage/') + args.remove + ".AppImage")
        os.remove('%s/.local/share/applications/' % HOME + args.remove + '.desktop')
        print('\033[92m' + done_text + '\033[0m')

if args.update in jsonObject:
    print('\033[1m' + updating_title + '\033[0m')
    if subprocess.getoutput("cat ~/.var/app/com.github.vikdevelop.apm/data/" + args.update + "-installed.yaml") == args.update + ": " + jsonObject[args.update]:
        print('\033[96m' + " @" + args.update + '\033[0m' + up_to_date)
    else:
        print('\033[96m' + " @" + args.update + '\033[0m' + updating)
        os.system("rm ~/.AppImage/" + args.update + ".AppImage")
        os.system("wget -qO ~/.AppImage/" + args.update + ".AppImage %s" % jsonObject[args.update])
        with open("%s/.var/app/com.github.vikdevelop.apm/data/" % HOME + args.update + "-installed.yaml", "r") as yread:
            lines = yread.readlines()
            ptr = 1
            with open("%s/.var/app/com.github.vikdevelop.apm/data/" % HOME + args.update + "-installed.yaml", "w") as yaml:
                for line in lines:
                    if ptr != 1:
                        yaml.write(line)
                    ptr += 1
                    yaml.write(args.update + ": " + jsonObject[args.update])
        print('\033[92m' + done_text + '\033[0m')
        
if args.search in jsonObject:
    print('\033[1m' + search_results + args.search + '\033[0m')
    print('\033[95m' + args.search + '\033[0m' + ": Latest AppImage of " + args.search + '\033[96m' + " @appimages.json" + '\033[0m')

if args.run:
    print('\033[1m' + '$ ~/.AppImage/' + args.run + '.AppImage' + '\033[0m')
    os.system("$HOME/.AppImage/" + args.run + ".AppImage")

if args.seeall:
    print(installed_appimages_text)
    os.system("ls $HOME/.AppImage")
